#!/usr/bin/env python3
""" Listing of source file declarations. """

import sys
import os

from postiats import declarations
from postiats import locations


def perror(message):
    """ Shorthand to print to `stderr`. """
    print(message, file=sys.stderr)


def error(message):
    """ `perror` and `sys.exit(1)`. """
    perror(message)
    sys.exit(1)


def print_loc(loc):
    """ Shorthand to parse and print formated loc. """
    loc = locations.parse(loc)
    loc = locations.ide_formated(loc)
    print(loc)


def dump():
    """ Dump declarations. """
    print("=========================")
    first = True
    if declarations.BASE_SORTS:
        print("Base sorts used:")
        for name in sorted(declarations.BASE_SORTS):
            print("   " + name)
            first = False
    if declarations.STATIC_CONSTANTS:
        print("Static constants defined or used:")
        if not first:
            print("-------------------------")
        for name in sorted(declarations.STATIC_CONSTANTS.keys()):
            sort = declarations.STATIC_CONSTANTS[name]
            print("   " + name + ": " + declarations.sort_image(sort))
            first = False
    for value in declarations.DECLARATIONS:
        if not first:
            print("-------------------------")
        first = False
        print("    Entity name: %s" % value.name)
        if value.sort:
            print(
                "    Entity sort: %s" %
                declarations.sta_sort_image(value.sort))
        if value.type:
            print(
                "Expression type: %s" %
                declarations.dyn_type_image(value.type))
            print(
                "Expression sort: %s" %
                declarations.dyn_sort_image(value.type))
        print("      Construct: %s" % value.construct)
        print_loc(value.loc)


def main():
    """ Main. """
    my_name = os.path.split(sys.argv[0])[1]

    recursive = False
    if len(sys.argv) >= 2 and sys.argv[1] == "-r":
        recursive = True
        del sys.argv[1]

    if len(sys.argv) != 2:
        error("Usage: %s [-r] file-name." % my_name)

    path = sys.argv[1]
    declarations.handle_source_file(path)
    dump()

    if recursive:
        done = set()
        while True:
            to_be_done = declarations.STALOADED.difference(done)
            done.update(declarations.STALOADED)
            declarations.clear()
            if not to_be_done:
                break
            for path in to_be_done:
                declarations.handle_source_file(path)
                dump()


if __name__ == "__main__":
    main()
