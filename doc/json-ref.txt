-- For explanations, see json-ref-ref.md

-- Note the following mentionned in comments, is to be read as indicated:
--
--   * ${type} sort as t@ype, type, viewt@ype or viewtype sort.
--   * ${type-view} as view or ${type} sort.
--   * ${prop-type-view} as prop or ${type-view} sort.


Root
==============================================================================

/: -- Each table is always present, even if empty.
   + d2conmap
   + d2cstmap
   + d2varmap
   + s2cstmap
   + s2varmap
   + d2eclist


C2LAU -- Case clauses
==============================================================================

c2lau_body: -- Matching clause body.
   ${d2exp}

c2lau_gua: -- Case-clause when‑guard.
   [
      + gm2at_exp
      + gm2at_loc
      + gm2at_pat
   ] 0…n -- When e1 and e2 and ….

c2lau_loc: -- Loc of the clause, excluding the “|” symbol.
   str

c2lau_neg: -- Clause reachability.
   int -- 0/1: => / =/=> (or =>> / =/=>>)

c2lau_pat: -- Case-clause pattern.
   [${p2at}] 1…n -- Matching patterns, ex. (x, y, …).

c2lau_seq: -- Clause sequentiality.
   int -- 0/1: => / =>> (or =/=> / =/=>>)


D2CON -- Dynamic constructors
==============================================================================

d2conmap: -- Dynamic constructors table.
   [
      + d2con_stamp
      + d2con_sym
      + d2con_type
   ] 0…n

d2con_stamp: -- Reference to or ID of a d2conmap entry.
   int

d2con_sym: -- Constructor name.
   str

d2con_type: -- Dynamic constructor type.
   ${s2exp} -- Of type sort, a functional type returning something of prop,
            -- type, t@ype, view or viewtype sort (not viewt@ype ?), taking
            -- arguments of ${prop-type-view} sort, the whole possibly under
            -- universal quantification (not existantial quantification).


D2CST -- Dynamic constants
==============================================================================

d2cst_extdef: -- Not extern or how it is extern.
   | DCSTEXTDEFnone
   | DCSTEXTDEFsome_ext
   | DCSTEXTDEFsome_mac
   | DCSTEXTDEFsome_sta

d2cstmap: -- Dynamic constants table.
   [
      + d2cst_extdef
      + d2cst_stamp
      + d2cst_sym
      + d2cst_type
   ] 0…n -- Ex. an “extern val v:int”.

d2cst_stamp: -- Reference to or ID of a d2cstmap entry.
   int

d2cst_sym: -- Constant name.
   str

d2cst_type: -- Dynamic constant “type“ (may be of sort prop).
   ${s2exp} -- Of sort prop, t@ype or type, possibly under quantification.
            -- The type expression can be a static variable (S2Evar) ?

D2Cdatdecs: -- DataXXX declaration(s).
   [0]: int -- 0/2/5/7: datatype/dataviewtype/dataprop/dataview.
   [1]: [s2cst_stamp] 1…n -- For datatype T and U and V ….

D2Cdcstdecs: -- Dynamic constant(s) declaration(s).
   [0]: int -- 0/1: "sta#…"/others
   [1]: str -- "DCKcastfn" / "DCKfun" / "DCKpraxi" / "DCKprfun" / "DCKval".
   [2]: [d2cst_stamp] 1…n -- For extern f and g and h ….

D2Cexndecs: -- Exception declaration.
   [0]: [d2con_stamp] 1…n -- For exception e1 and e2 ….

D2Cextcode: -- Embeded foreign language.
   [0]: int -- 0/1: %{#/others
   [1]: int -- 0/1/10/99: %{# / %{^/ %{ / %{$
   [2]: str -- Source snippet.

D2Cextvar: -- External variable assignment.
   [0]: str -- Name.
   [1]: ${d2exp} -- Value.

D2Cextype: -- External variable.
   [0]: str -- Name.
   [1]: ${s2exp} -- Type of viewtype sort (only ?).

D2Cfundecs: -- Function(s) definitions(s).
   [0]: str -- "FK_fn" / "FK_fnx" / "FK_fun" / "FK_prfn" / "FK_prfun".
   [1]: {}
   [2]: [
         + f2undec_ann
         + f2undec_def
         + f2undec_loc
         + f2undec_var
      ] 1…n -- Ex. fun x and y and z ….

D2Cignored: -- Ignored by patsopt.
   []

D2Cimpdec: -- Impementation of an extern or SATS declaration.
   [0]: int -- -1/0/+1: primplmnt/implmnt/implement.
   [1]:
      + i2mpdec_cst
      + i2mpdec_def
      + i2mpdec_imparg
      + i2mpdec_loc
      + i2mpdec_locid
      + i2mpdec_tmparg
      + i2mpdec_tmpgua

D2Cinclude: -- Include.
   [0]: int -- 0/1: from static/from dynamic (include from static or dynamic).
   [1]: [${d2ecl}] 0…n -- Declarations/definitions from included file.

D2Clist:
   [0]: [${d2ecl}] 0…n -- Declarations/definitions.

D2Clocal: -- Local declaration(s).
   [0]: [${d2ecl}] 0…n -- Local … in.
   [1]: [${d2ecl}] 0…n -- In … end.

D2Cnone: -- Erased by pasopt.
   []

D2Coverload: -- Overload definition.
   [0]: str -- Symbol or name.
   [1]: int -- “overload x with y of nnn”, kind of precedence of x.
   [2]: [
         | D2ITMcst
         | D2ITMignored
         | D2ITMvar
      ] 0…1 -- Empty on error.

D2Cstacsts: -- Stacst declaration(s).
   [0]: [s2cst_stamp] 1…n -- Stacst, for stacst x and y ….

D2Cstacsts: -- AbsXXX declaration(s).
   [0]: int
         -- 0/1/2/3/5/7.
         --
         --   * 0: abstype;
         --   * 1: abst@ype;
         --   * 2: absvtype;
         --   * 3: absvt@ype;
         --   * 5: absprop;
         --   * 7: absview.
         --
   [1]: [s2cst_stamp] 1…n -- AbsXXX x and y ….

D2Cstaload: -- Staload declaration.
   [0]: [str] 0…1 -- String for the $prefix.
   [1]: str -- Absolute path.

D2Cvaldecs: -- Value(s) declaration(s).
   [0]: str -- "VK_prval" / "VK_val" / "VK_val_neg" / "VK_val_pos".
   [1]: [
         + v2aldec_ann
         + v2aldec_def
         + v2aldec_loc
         + v2aldec_pat
      ] 1…n -- For val a and b and c ….

D2Cvardecs: -- Variable(s) déclaration(s).
   [0]: [
         + v2ardec_dvar
         + v2ardec_init
         + v2ardec_knd
         + v2ardec_loc
         + v2ardec_svar
         + v2ardec_type
      ] 1…n -- Element for var a and b and c ….


D2ECL -- Dynamic declarations
==============================================================================

${d2ecl}: -- Declaration.
   + d2ecl_loc
   + d2ecl_node

d2eclist: -- Declarations list.
   [${d2ecl}] 0…n

d2ecl_loc: -- Loc of the whole declaration, including the keyword which
   str     -- introduce it.

d2ecl_node: -- Declaration kind.
   | D2Cdatdecs
   | D2Cdcstdecs
   | D2Cexndecs
   | D2Cextcode
   | D2Cextvar
   | D2Cextype
   | D2Cfundecs
   | D2Cignored
   | D2Cimpdec
   | D2Cinclude
   | D2Clist
   | D2Clocal
   | D2Cnone
   | D2Coverload
   | D2Cstacsts
   | D2Cstaload
   | D2Cvaldecs
   | D2Cvardecs


D2E -- Dynamic expressions
==============================================================================

${d2exp}: -- Dynamic expression, possibly type annotated.
   + d2exp_loc
   + d2exp_node

d2exp_loc: -- Loc of the whole expression. For function body, the function
   str     -- name is excluded, the quantifier, metrics and arguments tuple
           -- are included.

d2exp_node: -- Dynamic expression kind.
   | D2Eann_funclo
   | D2Eann_seff
   | D2Eann_type
   | D2Eapplst
   | D2Eassgn
   | D2Ec0har
   | D2Ecasehead
   | D2Ecst
   | D2Ederef
   | D2Eempty
   | D2Eextfcall
   | D2Eextmcall
   | D2Eextval
   | D2Ef0loat
   | D2Ei0nt
   | D2Eifhead
   | D2Eignored
   | D2Eintrep
   | D2Elam_dyn
   | D2Elam_met
   | D2Elam_sta
   | D2Elet
   | D2Elist
   | D2Erec
   | D2Es0tring
   | D2Eselab
   | D2Eseq
   | D2Esing
   | D2Esym
   | D2Etup
   | D2Evar
   | D2Ewhere
   | D2Exchng

D2Eann_funclo: -- Closure annotation.
   [0]: ${d2exp} -- Annotated expression, a D2Eann_seff.
   [1]: -- Annotation.
      + funclo_arglst -- Empty when funclo_name is "FUNCLOfun".
      + funclo_name

D2Eann_seff: -- Effect(s) annotation.
   [0]: ${d2exp} -- Annotated function or lambda body.
   [1]: {} -- Should be a ${s2exp} ?

D2Eann_type: -- “Type” annotated dynamic expression (may be of prop sort).
   [0]: ${d2exp} -- Annotated expression.
   [1]: ${s2exp} -- “Type” of ${prop-type-view} sort, possibly under
                 -- quantification.

D2Eapplst: -- Dynamic function application.
   [0]: ${d2exp} -- What is applied.
   [1]: [
         | D2EXPARGdyn
         | D2EXPARGsta
      ] 1…n -- Arguments.

D2Eassgn: -- Assignment.
   [0]: ${d2exp} -- L-value, ex a D2Ederef, D2Eselab or D2Evar.
   [1]: ${d2exp} -- R-value.

D2Ec0har: -- Character literal.
   [0]: int -- Character code, always in 0…255, Postiats is not Unicode aware.

D2Ecasehead: -- Dynamic case expression.
   [0]: str -- "CK_case" / "CK_case_neg" / "CK_case_pos".
   [1]: {}
   [2]: [${d2exp}] 1…n -- Expressions to match, ex. (x, y, …).
   [3]: [
         + c2lau_body
         + c2lau_gua
         + c2lau_loc
         + c2lau_neg
         + c2lau_pat
         + c2lau_seq
      ] 1…n -- Clauses list.

D2Ecst: -- Dynamic constant.
   [0]: d2cst_stamp -- Reference to dynamic constant definition.

D2Ederef: -- Dereference.
   [0]: d2sym_sym -- always "!" ?
   [1]: ${d2exp} -- Dereferenced reference expression.

D2Eempty: -- Void, expression list of zero element.
   []

D2Eextfcall: -- External function call.
   [0]: ${s2exp} -- Result type of ${type} sort. Never quantified type ?
   [1]: str -- External function name.
   [2]: [${d2exp}] 0…n -- Arguments.

D2Eextmcall: -- External method call.
   [0]: ${s2exp} -- Result type of ${type} sort. Never quantified type ?
   [1]: ${d2exp} -- Object.
   [2]: str -- Method name.
   [3]: [${d2exp}] 0…n -- Arguments.

D2Eextval: -- External variable read‑access.
   [0]: ${s2exp} -- Variable type of ${type} sort. Never quantified type ?
   [1]: str -- External variable name or foreign language expression as text.

D2Ef0loat: -- Float/real image.
   [0]: str -- Ex. "10.0f", "0.0l", "2.0L", "3.1416", "7.", ….

D2Ei0nt: -- Integer image.
   [0]: str -- Ex. "0xFFFFU", "1", ….

D2Eifhead: -- Dynamic conditional (if‑statement).
   [0]: {}
   [1]: ${d2exp} -- Condition boolean expression.
   [2]: ${d2exp} -- Then part.
   [3]: [${d2exp}] 0…1 -- Else part.

D2Eignored: -- Ignored by patsopt.
   []

D2Eintrep: -- Integer image.
   [0]: str -- Ex. "0x0", "0", "128", ….

D2Elam_dyn: -- Dynamic lambda, not always a closure.
   [0]: int -- 0/1: non‑linear/linear
   [1]: int -- Nb of proofs in arguments, -1 means 0.
   [2]: [${p2at}] 0…n -- Arguments.
   [3]: ${d2exp} -- Lambda body.

D2Elam_met: -- Lambda with termination metric, ex. under a D2Elam_sta.
   [0]: [${s2exp}] 0…n -- Metric’s static arguments. Of a predicative sort ?
   [1]: ${d2exp} -- Lambda body.

D2Elam_sta: -- Static lambda, ex. wrapping a function with termination metric.
   [0]: [s2var_stamp] 0…n -- Static variables.
   [1]: [${s2exp}] 0…n -- Static expressions of bool sort.
   [2]: ${d2exp} -- Lambda body, a D2Eann_type, D2Elam_dyn, D2Elam_met or
                 -- another nested D2Elam_sta.

D2Elet: -- Let-expression.
   [0]: [${d2ecl}] 0…n -- Inner declarations in “let … in”.
   [1]: ${d2exp} -- Resulting expression in “in … end”.

D2Elist: -- Expressions list. Not the same as D2Eseq!
   [0]: int -- Nb of proofs in expressions list, -1 means 0.
   [1]: [${d2exp}] 2…n -- Expressions list. At least two expressions. There
                       -- will be a D2Eempty instead of empty D2Elist, and
                       -- a D2Exxx instead of D2Elist with singleton.

D2Erec: -- Record expression.
   [0]: int -- 0/1: flat/boxed.
   [1]: int -- Nb of proofs components, -1 means 0.
   [2]: [DL0ABELED] 1…n -- Components.

D2Es0tring: -- String literal.
   [0]: str

D2Eselab: -- Field selection.
   [0]: ${d2exp} -- What field selection is applied to. May be overloaded ?
   [1]: [
         + d2lab_loc
         + d2lab_node
      ] 1…n -- Field path elements, ex. e.x.y. ….

D2Eseq: -- Expressions sequence, like (x; y; z; …). Not the same as D2Elist!
   [0]: [${d2exp}] 2…n -- A sequence takes at least two expressions.

D2Esing: -- Singleton, ie. an expression list or tuple of one element.
   [0]: ${d2exp}

D2Esym: -- Overloaded symbol.
   [0]: d2sym_sym

D2Etup: -- Tuple expression.
   [0]: int -- 0/1: unboxed/boxed.
   [1]: int -- Nb of proofs components, -1 means 0.
   [2]: [${d2exp}] 0…n -- May be empty!

D2Evar: -- Dynamic variable.
   [0]: d2var_stamp -- Variable name (reference to).

D2Ewhere: -- Where-expression.
   [0]: ${d2exp} -- Resulting expression.
   [1]: [${d2ecl}] 0…n -- Inner declarations. May be empty!

D2Exchng: -- Exchange operator, like `a :=: b`
   [0]: ${d2exp} -- An R and L‑value, ex. a D2Evar.
   [1]: ${d2exp} -- An R and L‑value, ex. a D2Evar.

D2EXPARGdyn: -- Dynamic argument(s).
   [0]: int -- Nb of proofs arguments, -1 means 0
   [1]: str -- Loc of the arguments expression, duplicate of outer d2exp_loc.
   [2]: [${d2exp}] 0…n -- Arguments.

D2EXPARGsta: -- ?
   []


D2ITM -- Dynamic overloading
==============================================================================

D2ITMcst: -- Overloading with dynamic constant (d2cst).
   [0]: d2cst_stamp -- Overloaded constant definition (reference to).

D2ITMignored: -- Ignored by patsopt.
   []

D2ITMvar: -- Overloading with dynamic variable (d2var).
   [0]: d2var_stamp -- Overloaded variable name (reference to).


D2LAB -- Dynamic component selectors
==============================================================================

d2lab_node: -- Field selector path element.
   | D2LABind
   | D2LABlab

D2LABind: -- Array‑like field selection, not the same as LABint!
   [0]: [${d2exp}] 1…n -- Indexes list, ex in “[1, 2, 3]”.

D2LABlab: -- Named field selection.
   [0]: ${lab}

d2lab_loc: -- Loc of the selector “expression”, including the “.” or “->”,
   str     -- also including the “[” and “]” when there are.


D2SYM -- Dynamic symbols
==============================================================================

d2sym_sym: -- Dynamic symbol name.
   str


D2VAR -- Dynamic variables
==============================================================================

d2varmap: [
      + d2var_stamp
      + d2var_sym
   ] 0…n

d2var_stamp: -- Reference to or ID of a d2varmap entry.
   int

d2var_sym: -- Dynamic variable name.
   str


DCSTEXTDEF -- Dynamic extern constants
==============================================================================

DCSTEXTDEFnone:
   [0]: int -- 0/1: static (implicit "sta#") / extern (implicit in SATS).

DCSTEXTDEFsome_ext: -- "ext#…", extern C function/entity.
   [0]: str -- name

DCSTEXTDEFsome_mac: -- "mac#…", extern C macro.
   [0]: str -- name

DCSTEXTDEFsome_sta: -- "sta#…", extern C static function/entity.
   [0]: str -- name


DL0ABELED -- Record literal components
==============================================================================

DL0ABELED: -- Record literal component.
   [0]: ${lab} -- Component label.
   [1]: ${d2exp} -- Component value.


F2UN -- Function definitions
==============================================================================

f2undec_ann: -- `withtype` annotation.
   [${s2exp}] 0…1 -- Type annotation, of type sort.

f2undec_def: -- Function body.
   ${d2exp}

f2undec_loc:
   str -- Loc of function name and body, excluding the keyword and generic
       -- arguments.

f2undec_var: -- Function name.
   d2var_stamp -- Reference to corresponding value definition (gives name).


FUNCLO -- Closures
==============================================================================

funclo_arglst: -- Closure kind.
   [int] 0…1 -- -1/+1: cloref/cloptr, not a closure if empty.

funclo_name: -- Function kind.
   str -- "FUNCLOclo" / "FUNCLOfun": closure / non‑closure.


GM2AT -- Case‑clause guards
==============================================================================

gm2at_exp: -- Case clause guard’s `when` part.
   ${d2exp} -- The `g` in `| p when g => e`

gm2at_loc: -- Loc of the guard exp and pat, excluding the `when` keyword.
   str

gm2at_pat: Case clause guard’s `as` part. Not the same as P2Trefas!
   [${p2at}] 0…1 -- The `p2` in `| p1 when g as p2 => e`


I2MPDEC -- Implementations
==============================================================================

i2mpdec_cst: -- Name of the implemented extern.
   d2cst_stamp -- Corresponding constant definition (reference to).

i2mpdec_def: -- Implementation definition, does not include generic params.
   ${d2exp}

i2mpdec_imparg: -- Static variables ?
   {}

i2mpdec_loc: -- Loc of the function implementation, excluding the keyword and
   str       -- and the generic parameters, including the name, quantifiers,
             -- metric, arguments tuple and body.

i2mpdec_locid: -- Loc of the implemented name, including generic arguments.
   str

i2mpdec_tmparg: -- Static arguments ?
   {}

i2mpdec_tmpgua: -- Static guards ?
   {}


LAB -- Record labels
==============================================================================

${lab}: -- Label.
   | LABint
   | LABsym

LABint: -- Integer as record label, not the same as D2LABind!
   int

LABsym: -- Name as record label, the most common.
   str


LABP2AT -- Pattern for record components (records in patterns)
==============================================================================

LABP2ATnorm: -- Pattern for record component.
   [0]: ${lab} -- Record component selection.
   [1]: ${p2at} -- The pattern to match with the record component.


P2AT -- Patterns
==============================================================================

${p2at}: -- A pattern.
   + p2at_loc
   + p2at_node

p2at_loc: -- Loc of the pattern, including any `as` (alias) part.
   str

p2at_node: -- Pattern kind.
   | P2Tann
   | P2Tany
   | P2Tbool
   | P2Tchar
   | P2Tcon
   | P2Tempty
   | P2Tf0loat
   | P2Ti0nt
   | P2Tignored
   | P2Tintrep
   | P2Trec
   | P2Trefas
   | P2Tstring
   | P2Tvar
   | P2Tvbox

P2Tann: -- Annotated pattern expression.
   [0]: ${p2at} -- Pattern expression.
   [1]: ${s2exp} -- Type annotation, of ${prop-type-view} sort.

P2Tany: -- Wildcard pattern.
   []

P2Tbool: -- Boolean literal pattern.
   [0]: bool -- Boolean literal.

P2Tchar: -- Character literal pattern.
   [0]: int -- Character code in 0…255 (Postiats is not Unicode aware).

P2Tcon: -- Constructor application pattern.
   [0]: str -- "PCKcon" / "PCKfree" / "PCKunfold": `C(…)` / `~C(…)` / `@C(…)`.
   [1]: d2con_stamp -- Reference to constructor definition (name and type).
   [2]: {}
   [3]: {}
   [4]: -1 -- Nb of proofs in constructor arguments, -1 means 0
   [5]: [${p2at}] 0…n -- Constructor arguments (sub‑patterns list).

P2Tempty: -- Empty/void pattern.
   []

P2Tf0loat: -- Float literal pattern. Unsigned! Not the same as P2Tfloat.
   [0]: str -- Float image.

P2Tfloat: -- Float literal “#defined”, pattern. May be signed.
   [0]: str -- Float image.

P2Ti0nt: -- Natural number pattern. Unsigned! Not the same as P2Tintrep.
   [0]: str -- Natural number image.

P2Tignored: -- Pattern ignored by patsopt.
   []

P2Tintrep: -- Integer literal “#defined”, pattern. May be signed.
   [0]: str -- Integer image.

P2Trec: -- Record or tuple pattern.
   [0]: int -- 0/1: flat/boxed.
   [1]: int -- Nb of proofs in the tuple or record, -1 means 0
   [2]: [LABP2ATnorm] 0…n -- Tuple/record components patterns. May be empty!

P2Trefas: -- Sub‑pattern reference. Not the same as gm2at_pat!
   [0]: d2var_stamp -- Pattern alias name (reference to).
   [1]: ${p2at} -- Aliased pattern.

P2Tstring: -- String literal pattern.
   [0]: str -- Reminder: Postiats is not Unicode aware.

P2Tvar: -- Pattern variable.
   [0]: d2var_stamp -- Variable name (reference to).

P2Tvbox: -- `vbox` pattern.
   [0]: d2var_stamp -- Proof variable name (reference to).


S2CST -- Static constants
==============================================================================

s2cst_dconlst: -- A dataXXX list is the static constant is.
   [ [d2con_stamp] 1…n ] 0…1 -- Nothing (none) when it’s ex. an absXXX.
   -- Note this is a list (1…n) wrapped in an optional list (0…1)!

s2cst_extdef:
   [str] 0…1 -- Name of $extype if it is one.

s2cstmap: [
      + s2cst_dconlst
      + s2cst_extdef
      + s2cst_srt
      + s2cst_stamp
      + s2cst_supcls
      + s2cst_sym
   ] 0…n

s2cst_srt: -- Static constant sort.
   ${s2rt}

s2cst_stamp: -- Reference to or ID of a s2cstmap entry.
   int

s2cst_supcls: -- ?
   []

s2cst_sym: -- Static constant name.
   str


S2E -- Static expressions
==============================================================================

${s2exp}: -- Static expression (often a type expression).
   + s2exp_node
   + s2exp_srt

s2exp_node: -- Static expression kind.
   | S2Eapp
   | S2Eat
   | S2Ecst
   | S2Eexi
   | S2Eextkind
   | S2Eextype
   | S2Efun
   | S2Eignored
   | S2Eintinf
   | S2Einvar
   | S2Erefarg
   | S2Esizeof
   | S2Etop
   | S2Etyarr
   | S2Etyrec
   | S2Euni
   | S2Evararg
   | S2Evar
   | S2Ewthtype

s2exp_srt: -- Static expression sort (often t@ype or type sort).
   ${s2rt}

S2Eapp: -- Static application.
   [0]: ${s2exp} -- Applied expression, of functional sort.
   [1]: [${s2exp}] 0…n -- Arguments, of any sort.

S2Eat: -- At‑view expression.
   [0]: ${s2exp} -- Type, of ${type-view} sort.
   [1]: ${s2exp} -- Memory address, of addr sort.

S2Ecst: -- Static constant as expression.
   [0]: s2cst_stamp -- Constant name and more (reference to).

S2Eexi: -- Existential quantification.
   [0]: [s2var_stamp] 0…n -- Quantified variables.
   [1]: [${s2exp}] 0…n -- Quantified variables predicats, of bool sort.
   [2]: ${s2exp} -- Static formula, of ${prop-type-view} sort.

S2Eextkind: -- External tkind.
   [0]: str -- External tkind name.

S2Eextype: -- External type.
   [0]: str -- External type name.

S2Efun: -- Static function.
   [0]: int -- Nb of proofs in ex. `typedef tf = (pf | a) int`, -1 means 0.
   [1]: [${s2exp}] 0…n -- Arguments, of any sort.
   [2]: ${s2exp} -- Result, of any sort.

S2Eignored: -- Ignored by patsopt.
   []

S2Eintinf: -- Unbounded natural number.
   [0]: str -- Natual number image.

S2Einvar: -- ? Could not figure “handling type unification”.
   [0]: ${s2exp} -- Expression of ${type-view} sort.

S2Erefarg: -- Applied argument passing mode.
   [0]: int -- 0/1 by‑value/by‑reference.
   [1]: ${s2exp} -- Argument type of ${type-view} sort.

S2Esizeof: -- Applied `sizeof`.
   [0]: ${s2exp} -- Type of `t@ype` sort.

S2Etop: -- Applied data part mode.
   [0]: int -- 0/1 no-data-part/data-part-only, alias topization/typization.
   [1]: ${s2exp} -- Type of ${type} sort.

S2Etyarr: -- Array type expression.
   [0]: ${s2exp} -- Element type, of ${type} sort.
   [1]: [${s2exp}] 0…n -- Dimmensions, of `int` sort.

S2Etyrec: -- Record type expression.
   [0]: -- Kind (about boxed or flat).
      | TYRECKINDbox
      | TYRECKINDbox_lin
      | TYRECKINDflt0
      | TYRECKINDflt1
      | TYRECKINDflt_ext
   [1]: int -- Nb of proofs components, -1 means 0.
   [2]: [SL0ABELED] 1…n -- Labels.

S2Euni: -- Universal quantification.
   [0]: [s2var_stamp] 0…n -- Quantified variables.
   [1]: [${s2exp}] 0…n -- Quantified variables predicats, of bool sort.
   [2]: ${s2exp}  -- Static formula, of `prop`, `t@ype` or `type` sort.
                  -- Not of ${prop-type-view} sort ?

S2Evararg: -- Type of function arguments of sort `types` (variadic arguments).
   [0]: ${s2exp} -- Type expression of `types` sort.

S2Evar: -- Static variable.
   [0]: s2var_stamp -- Variable name and sort (reference to).

S2Ewthtype: -- Internally generated return type annotations involving proofs.
   [0]: ${s2exp} -- Returned type, of ${prop-type-view} sort.
   [1]: -- internal Representation, can be ignored when documenting.
      | WTHS2EXPLSTcons_invar
      | WTHS2EXPLSTcons_none
      | WTHS2EXPLSTcons_trans
      -- Like ${wths2explst} less WTHS2EXPLSTcons_nil


S2RT -- Sorts
==============================================================================

${s2rt}: -- Sort expression kind.
   | S2RTbas
   | S2RTerr
   | S2RTfun
   | S2RTtup

S2RTbas: -- Sort name. Not necessarily a predefined sort!
   [0]: str

S2RTerr: -- Subsituted for errors by patsopt, not a real sort expression.
   []

S2RTfun: -- Functional sort.
   [0]: [${s2rt}] 0…n -- Arguments sorts.
   [1]: ${s2rt} -- Returned sort.

S2RTtup: -- Tuple sort (there is no label with static tuples).
   [0]: [${s2rt}] 0…n -- Components sorts.


S2VAR -- Static variables
==============================================================================

s2varmap: -- Static variables table.
   [
      + s2var_srt
      + s2var_stamp
      + s2var_sym
   ] 0…n

s2var_srt: -- Static variable sort.
   ${s2rt}

s2var_stamp: -- Reference to or ID of a s2varmap entry.
   int

s2var_sym: -- Static variable name.
   str


SL0ABELED -- Record types components
==============================================================================

SL0ABELED: -- Record type component.
   [0]: ${lab} -- Component label.
   [1]: []
   [2]: ${s2exp} -- Component type, of ${prop-type-view} sort.


TYRECKIND -- Record kinds
==============================================================================

TYRECKINDbox: -- Boxed.
   []

TYRECKINDbox_lin: -- Linear boxed ?
   []

TYRECKINDflt_ext: -- Flat external struct.
   [0]: str -- External struct name.

TYRECKINDflt0: -- Flat.
   []

TYRECKINDflt1: -- What variation of flat ?
   [0]: ?


V2ALDEC -- Values
==============================================================================

v2aldec_ann: -- Should be the `val` `withtype` annotation: always missing ?
   {}

v2aldec_def: -- Value for v2aldec_pat.
   ${d2exp}

v2aldec_loc:
   str -- Loc of all except, the keyword.

v2aldec_pat: -- Variables and possibly their types.
   ${p2at}


V2ARDEC -- Variables (`var`, not `val`!)
==============================================================================

v2ardec_dvar: -- Variable name.
   d2var_stamp -- Variable name (reference to).

v2ardec_init: -- Variable initialisation expression.
   [0]: ${d2exp}

v2ardec_knd: -- Variable access mode.
   int -- 0/1: var/ptr.

v2ardec_loc: -- Loc of all, except the keyword.
   str

v2ardec_svar: -- Corresponding static `addr` (variable’s address).
   s2var_stamp -- Reference to static variable.

v2ardec_type: -- Variable type.
   [${s2exp}] 0…1 -- Option available when type annotated.


WTHS2EXPLST
==============================================================================

${wths2explst}: -- How to summarise this ?
   | WTHS2EXPLSTcons_invar
   | WTHS2EXPLSTcons_none
   | WTHS2EXPLSTcons_trans
   | WTHS2EXPLSTnil

WTHS2EXPLSTcons_invar: -- `INV(x)`
   [0]: int -- 0/1 by‑value/by‑reference.
   [1]: ${s2exp} -- ${type-view} sort
   [2]: ${wths2explst} -- Next, like in a “cons” linked list.

WTHS2EXPLSTcons_none:
   [0]: ${wths2explst}

WTHS2EXPLSTcons_trans: -- Assignment, x := y.
   [0]: int -- 0/1 by‑value/by‑reference.
   [1]: ${s2exp}
   [2]: ${wths2explst}

WTHS2EXPLSTnil:
   []
